<launch>
  <arg name="kinect_ns" default="camera" />
  <arg name="checker_rows" default="4"/>
  <arg name="checker_cols" default="5"/>
  <arg name="checker_size" default="0.0245"/>
  <arg name="headless" default="false" />

  <arg name="camera1_ns" default="$(arg kinect_ns)/rgb" />
  <arg name="camera2_ns" default="$(arg kinect_ns)/ir" />


  <!-- checkerboard detector for each camera -->
  <include file="$(find camera_pose_calibration)/blocks/rgb_trigger_block.launch">
    <arg name="ns" value="$(arg camera1_ns)" />
    <arg name="checker_rows" value="$(arg checker_rows)" />
    <arg name="checker_cols" value="$(arg checker_cols)" />
    <arg name="checker_size" value="$(arg checker_size)" />
  </include>
  <include file="$(find camera_pose_calibration)/blocks/rgb_trigger_block.launch">
    <arg name="ns" value="$(arg camera2_ns)" />
    <arg name="checker_rows" value="$(arg checker_rows)" />
    <arg name="checker_cols" value="$(arg checker_cols)" />
    <arg name="checker_size" value="$(arg checker_size)" />
  </include>
  <node type="flip_flop_kinect.py" pkg="camera_pose_calibration" name="flip_flop_kinect" >
    <remap from="trigger_one_1" to="$(arg camera1_ns)/trigger_one" />
    <remap from="trigger_one_2" to="$(arg camera2_ns)/trigger_one" />
  </node>

  
  <!-- find time intervals where all camera's see a checkerboard -->
  <node type="interval_intersection_action" pkg="interval_intersection" name="interval_intersection" output="screen" />
  <node pkg="camera_pose_calibration" type="start_interval_intersection.py" name="start_interval_intersection"
        args="$(arg camera1_ns) $(arg camera2_ns)" output="screen" />
  <node pkg="camera_pose_calibration" type="filter_intervals.py" name="filter_intervals">
     <param name="min_duration" value="10.0" />
     <remap from="features" to="$(arg camera1_ns)/features" />
  </node>


  <!-- generate robot measurements -->
  <node pkg="camera_pose_calibration" type="multicam_capture_exec.py" name="capture_exec" 
        args="$(arg camera1_ns) $(arg camera2_ns)" output="screen">
    <param name="cam_info_topic" value="camera_info" />
    <remap from="request_interval" to="interval_filtered" />
  </node>


  <!-- optimize camera poses -->
  <node type="run_optimization_online.py" pkg="camera_pose_calibration" name="cal_optimizer" output="screen"/>


  <!-- Visualization -->
  <node type="capture_monitor.py" pkg="camera_pose_calibration" name="capture_monitor" output="screen"
        args="$(arg camera1_ns) $(arg camera2_ns)" />


  <node unless="$(arg headless)" type="image_view" pkg="image_view" name="aggregated_image_viewer" >
     <remap from="image" to="aggregated_image" />
  </node>

</launch>
