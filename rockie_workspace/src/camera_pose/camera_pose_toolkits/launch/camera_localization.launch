  <launch>
	<arg name="new_cam_ns"  default="new_cam"/>	
        <arg name="urdf_cam_ns" />

	<arg name="mounting_frame" />

	<arg name="checker_rows" default="4" />
	<arg name="checker_cols" default="5" />
	<arg name="checker_size" default="0.0249"/>
	<arg name="headless" default="true" />
        <arg name="bag_file_name" default="/tmp/static_transforms.bag" />

        <param name="urdf_cam_ns" value ="$(arg urdf_cam_ns)" />
	<param name="new_cam_ns" value="$(arg new_cam_ns)" />
	<param name="mounting_frame" value ="$(arg mounting_frame)" />
        <param name="optimizer_conditional_resetter_enable" value ="True" />

        <node pkg="camera_pose_toolkits" type="camera_dispatcher_node" name="camera_dispatcher" args="$(arg new_cam_ns)" output="screen">
        <remap from="camera_dispatcher" to="camera_dispatcher_for_$(arg new_cam_ns)"/>
	</node>

	<!-- start camera pose calibration -->
        <include file="$(find camera_pose_calibration)/launch_extrinsics/calibrate_2_camera.launch" >
          <arg name="camera1_ns" value="$(arg urdf_cam_ns)" />
          <arg name="camera2_ns" value="$(arg new_cam_ns)" />
	  <arg name="checker_rows" value="$(arg checker_rows)" />
	  <arg name="checker_cols" value="$(arg checker_cols)" />
	  <arg name="checker_size" value="$(arg checker_size)" />
	  <arg name="headless" value="$(arg headless)" />
        </include>

    	<node pkg="camera_pose_toolkits" type="transform_finder_node" name="transform_finder" output="screen" >
	</node>
	<node pkg="camera_pose_toolkits" type="camera_pose_static_transform_tf_broadcaster_node" name="camera_pose_static_transform_tf_broadcaster" output="screen"/>
        <node pkg="camera_pose_toolkits" type="transform_message_saver.py" name="transform_message_saver" args="$(arg bag_file_name)"  output="screen"/>

  </launch>
