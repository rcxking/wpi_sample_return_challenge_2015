<launch>

	<!-- 1) SPAWN OPENNI DRIVER -->

	<!-- "camera" should uniquely identify the device. All topics are pushed down
	into the "camera" namespace, and it is prepended to tf frame ids. -->
	<arg name="camera" default="camera" />
	<arg name="tf_prefix" default="" />
	<arg name="rgb_frame_id"   default="$(arg tf_prefix)/$(arg camera)_rgb_optical_frame" />
	<arg name="depth_frame_id" default="$(arg tf_prefix)/$(arg camera)_depth_optical_frame" />

	<!-- device_id can have the following formats:
	"B00367707227042B": Use device with given serial number
	"#1"              : Use first device found
	"2@3"             : Use device on USB bus 2, address 3
	"2@0"             : Use first device found on USB bus 2
	-->
	<arg name="device_id" default="#1" />

	<!-- By default, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml,
	where ${NAME} is of the form "[rgb|depth]_[serial#]", e.g. "depth_B00367707227042B".
	See camera_info_manager docs for calibration URL details. -->
	<arg name="rgb_camera_info_url"   default="" />
	<arg name="depth_camera_info_url" default="" />

	<!-- Use OpenNI's factory-calibrated depth->RGB registration? -->
	<arg name="depth_registration" default="false" />

	<!-- Arguments for remapping all device namespaces -->
	<arg name="rgb"              default="rgb" />
	<arg name="ir"               default="ir" />
	<arg name="depth"            default="depth" />
	<arg name="depth_registered" default="depth_registered" />
	<arg name="projector"        default="projector" />

	<!-- Optionally suppress loading the driver nodelet and/or publishing the default tf
	tree. Useful if you are playing back recorded raw data from a bag, or are
	supplying a more accurate tf tree from calibration. -->
	<arg name="load_driver" default="true" />
	<arg name="publish_tf" default="true" />
	<!-- Processing Modules -->
	<arg name="rgb_processing"                  default="true"/>
	<arg name="ir_processing"                   default="true"/>
	<arg name="depth_processing"                default="true"/>
	<arg name="depth_registered_processing"     default="true"/>
	<arg name="disparity_processing"            default="true"/>
	<arg name="disparity_registered_processing" default="true"/>
	<arg name="hw_registered_processing"        default="true" />
	<arg name="sw_registered_processing"        default="true" />

	<!-- Disable bond topics by default -->
	<arg name="bond" default="false" /> <!-- DEPRECATED, use respawn arg instead -->
	<arg name="respawn" default="$(arg bond)" />

	<!-- Worker threads for the nodelet manager -->
	<arg name="num_worker_threads" default="4" />

	<!-- Push down all topics/nodelets into "camera" namespace -->
	<group ns="$(arg camera)">

	<!-- Start nodelet manager in top-level namespace -->
	<arg name="manager" value="$(arg camera)_nodelet_manager" />
	<arg name="debug" default="false" /> <!-- Run manager in GDB? -->
	<include file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
	<arg name="name"                value="$(arg manager)" />
	<arg name="debug"               value="$(arg debug)" />
	<arg name="num_worker_threads"  value="$(arg num_worker_threads)" />
	</include>

	<!-- Load driver -->
	<include if="$(arg load_driver)"
	file="$(find openni_launch)/launch/includes/device.launch.xml">
	<!-- Could really use some syntactic sugar for this -->
	<arg name="manager"               value="$(arg manager)" />
	<arg name="device_id"             value="$(arg device_id)" />
	<arg name="rgb_frame_id"          value="$(arg rgb_frame_id)" />
	<arg name="depth_frame_id"        value="$(arg depth_frame_id)" />
	<arg name="rgb_camera_info_url"   value="$(arg rgb_camera_info_url)" />
	<arg name="depth_camera_info_url" value="$(arg depth_camera_info_url)" />
	<arg name="depth_registration"    value="$(arg depth_registration)" />
	<arg name="rgb"                   value="$(arg rgb)" />
	<arg name="ir"                    value="$(arg ir)" />
	<arg name="depth"                 value="$(arg depth)" />
	<arg name="depth_registered"      value="$(arg depth_registered)" />
	<arg name="projector"             value="$(arg projector)" />
	<arg name="respawn"               value="$(arg respawn)" />
	</include>

	<!-- Load standard constellation of processing nodelets -->
	<include file="$(find rgbd_launch)/launch/includes/processing.launch.xml">
	<arg name="manager"                         value="$(arg manager)" />
	<arg name="rgb"                             value="$(arg rgb)" />
	<arg name="ir"                              value="$(arg ir)" />
	<arg name="depth"                           value="$(arg depth)" />
	<arg name="depth_registered"                value="$(arg depth_registered)" />
	<arg name="projector"                       value="$(arg projector)" />
	<arg name="respawn"                         value="$(arg respawn)" />
	<arg name="rgb_processing"                  value="$(arg rgb_processing)" />
	<arg name="ir_processing"                   value="$(arg ir_processing)" />
	<arg name="depth_processing"                value="$(arg depth_processing)" />
	<arg name="depth_registered_processing"     value="$(arg depth_registered_processing)" />
	<arg name="disparity_processing"            value="$(arg disparity_processing)" />
	<arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)" />
	<arg name="hw_registered_processing"        value="$(arg hw_registered_processing)" />
	<arg name="sw_registered_processing"        value="$(arg sw_registered_processing)" />
	</include>

	</group> <!-- camera -->

	<!-- Load reasonable defaults for the relative pose between cameras -->
	<include if="$(arg publish_tf)"
	file="$(find rgbd_launch)/launch/kinect_frames.launch">
	<arg name="camera" value="$(arg camera)" />
	<arg name="tf_prefix" value="$(arg tf_prefix)" />
	</include>

	<!-- *********2 - SPAWN RTABMAP PROCESS **********-->

	<!-- RGB-D MAPPING VERSION -->
	<!-- WARNING : Database is automatically deleted on each startup -->
    <!--           See "delete_db_on_start" option below... -->
	    
	<!-- Choose visualization -->
	<arg name="rviz" default="false" />
	<arg name="rtabmapviz" default="true" /> 
			    
	<!-- ODOMETRY MAIN ARGUMENTS: 
	 -"strategy"        : Strategy: 0=BOW (bag-of-words) 1=Optical Flow
	 -"feature"         : Feature type: 0=SURF 1=SIFT 2=ORB 3=FAST/FREAK 4=FAST/BRIEF 5=GFTT/FREAK 6=GFTT/BRIEF 7=BRISK
	 -"nn"              : Nearest neighbor strategy : 0=Linear, 1=FLANN_KDTREE, 2=FLANN_LSH, 3=BRUTEFORCE 
	                      Set to 1 for float descriptor like SIFT/SURF                  
	                      Set to 3 for binary descriptor like ORB/FREAK/BRIEF/BRISK  
	 -"max_depth"       : Maximum features depth (m)  
	 -"min_inliers"     : Minimum visual correspondences to accept a transformation (m)  
     -"inlier_distance" : RANSAC maximum inliers distance (m)  
     -"local_map"       : Local map size: number of unique features to keep track 
     -"odom_info_data"  : Fill odometry info messages with inliers/outliers data.
     -->
     <arg name="strategy" default="0" />
     <arg name="feature" default="6" />
     <arg name="nn" default="3" />
     <arg name="max_depth" default="4.0" />
     <arg name="min_inliers" default="20" />
     <arg name="inlier_distance" default="0.02" />
     <arg name="local_map" default="1000" />
     <arg name="odom_info_data" default="true" />
																																										    
     <!-- TF FRAMES -->
     <node pkg="tf" type="static_transform_publisher" name="base_to_camera_tf" 
	    args="0.0 0.0 0.0 0.0 0.0 0.0 /base_link /camera_link 100" />
																																     
	 <group ns="rtabmap_ros">
																							     
	 <!-- Odometry -->
	 <node pkg="rtabmap_ros" type="rgbd_odometry" name="visual_odometry" output="screen">
	 <remap from="rgb/image"       to="/camera/rgb/image_rect_color"/>
	 <remap from="depth/image"     to="/camera/depth_registered/image_raw"/>
     <remap from="rgb/camera_info" to="/camera/depth_registered/camera_info"/>
																																   	  
     <param name="Odom/Strategy" type="string" value="$(arg strategy)"/> 
     <param name="Odom/FeatureType" type="string" value="$(arg feature)"/>  
     <param name="OdomBow/NNType" type="string" value="$(arg nn)"/>
     <param name="Odom/MaxDepth" type="string" value="$(arg max_depth)"/>  
     <param name="Odom/MinInliers" type="string" value="$(arg min_inliers)"/> 
     <param name="Odom/InlierDistance" type="string" value="$(arg inlier_distance)"/>       
     <param name="OdomBow/LocalHistorySize" type="string" value="$(arg local_map)"/> 
     <param name="Odom/FillInfoData" type="string" value="$(arg odom_info_data)"/>   
     </node>
 																																																															    
     <!-- Visual SLAM (robot side) -->
     <!-- args: "delete_db_on_start" and "udebug" -->
     <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="--delete_db_on_start">
     <param name="subscribe_depth" type="bool" value="true"/>
																																																											  	
     <remap from="rgb/image" to="/camera/rgb/image_rect_color"/>
     <remap from="depth/image" to="/camera/depth_registered/image_raw"/>
     <remap from="rgb/camera_info" to="/camera/depth_registered/camera_info"/>
     <param name="LccBow/MinInliers" type="string" value="10"/>
     <param name="LccBow/InlierDistance" type="string" value="0.02"/>
     </node>
																																																																					    
     <!-- Visualisation RTAB-Map -->
     <node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">
     <param name="subscribe_depth" type="bool" value="true"/>
     <param name="subscribe_odom_info" type="bool" value="$(arg odom_info_data)"/>
																																																																									    
     <remap from="rgb/image" to="/camera/rgb/image_rect_color"/>
     <remap from="depth/image" to="/camera/depth_registered/image_raw"/>
     <remap from="rgb/camera_info" to="/camera/depth_registered/camera_info"/>
     </node>																																																																																	    
     </group>	
	 																																    
     <!-- Visualization RVIZ -->
     <node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="-d $(find rtabmap_ros)/launch/config/rgbd.rviz"/>
     <!-- sync cloud with odometry and voxelize the point cloud (for fast visualization in rviz) -->
     <node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="standalone_nodelet"  args="manager" output="screen"/>
     <node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="data_odom_sync" args="load rtabmap_ros/data_odom_sync standalone_nodelet">
     <remap from="rgb/image_in"       to="camera/rgb/image_rect_color"/>
     <remap from="depth/image_in"     to="camera/depth_registered/image_raw"/>
     <remap from="rgb/camera_info_in" to="camera/depth_registered/camera_info"/>
     <remap from="odom_in"             to="rtabmap/odom"/>
																																																																																									      
     <remap from="rgb/image_out"       to="data_odom_sync/image"/>
     <remap from="depth/image_out"     to="data_odom_sync/depth"/>
     <remap from="rgb/camera_info_out" to="data_odom_sync/camera_info"/>
     <remap from="odom_out"            to="odom_sync"/>
     </node>
     <node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="points_xyzrgb" args="load rtabmap_ros/point_cloud_xyzrgb standalone_nodelet">
     <remap from="rgb/image"       to="data_odom_sync/image"/>
     <remap from="depth/image"     to="data_odom_sync/depth"/>
     <remap from="rgb/camera_info" to="data_odom_sync/camera_info"/>
     <remap from="cloud"           to="voxel_cloud" />
     <param name="voxel_size" type="double" value="0.01"/>
     </node>


	 <!-- ********** 3 - Spawn the Map Assembler ********** -->
	 <node pkg="rtabmap_ros" type="map_assembler" name="map_assembler">
	 	<param name="occupancy_grid" type="bool" value="true"/>
	 	<remap from="mapData" to="rtabmap_ros/mapData"/>
	 </node>
</launch>
